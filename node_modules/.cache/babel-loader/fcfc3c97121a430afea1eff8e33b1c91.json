{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\PRODIGY_WD_05\\\\src\\\\currentLocation.js\";\nimport React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = d => {\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true\n};\n\nclass Weather extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: undefined,\n      lon: undefined,\n      errorMessage: undefined,\n      temperatureC: undefined,\n      temperatureF: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      icon: \"CLEAR_DAY\",\n      sunrise: undefined,\n      sunset: undefined,\n      errorMsg: undefined\n    };\n\n    this.getPosition = options => {\n      return new Promise(function (resolve, reject) {\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n      });\n    };\n\n    this.getWeather = async (lat, lon) => {\n      const url = `${apiKeys.base}onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&units=metric&appid=${apiKeys.key}`;\n      console.log(`Fetching weather data from: ${url}`);\n\n      try {\n        const api_call = await fetch(url);\n\n        if (api_call.status === 401) {\n          throw new Error(\"Unauthorized: API key is invalid or expired.\");\n        }\n\n        const data = await api_call.json();\n        console.log(data); // Log data to check the response structure\n\n        if (data.current && data.current.weather && data.current.weather[0]) {\n          this.setState({\n            lat: lat,\n            lon: lon,\n            city: data.timezone,\n            temperatureC: Math.round(data.current.temp),\n            temperatureF: Math.round(data.current.temp * 1.8 + 32),\n            humidity: data.current.humidity,\n            main: data.current.weather[0].main,\n            country: \"\" // One Call API does not return country information\n\n          });\n\n          switch (this.state.main) {\n            case \"Haze\":\n              this.setState({\n                icon: \"CLEAR_DAY\"\n              });\n              break;\n\n            case \"Clouds\":\n              this.setState({\n                icon: \"CLOUDY\"\n              });\n              break;\n\n            case \"Rain\":\n              this.setState({\n                icon: \"RAIN\"\n              });\n              break;\n\n            case \"Snow\":\n              this.setState({\n                icon: \"SNOW\"\n              });\n              break;\n\n            case \"Dust\":\n              this.setState({\n                icon: \"WIND\"\n              });\n              break;\n\n            case \"Drizzle\":\n              this.setState({\n                icon: \"SLEET\"\n              });\n              break;\n\n            case \"Fog\":\n              this.setState({\n                icon: \"FOG\"\n              });\n              break;\n\n            case \"Smoke\":\n              this.setState({\n                icon: \"FOG\"\n              });\n              break;\n\n            case \"Tornado\":\n              this.setState({\n                icon: \"WIND\"\n              });\n              break;\n\n            default:\n              this.setState({\n                icon: \"CLEAR_DAY\"\n              });\n          }\n        } else {\n          this.setState({\n            errorMessage: \"Unable to retrieve weather data. Please try again later.\"\n          });\n        }\n      } catch (error) {\n        this.setState({\n          errorMessage: `Error fetching weather data: ${error.message}. Please check your internet connection and try again.`\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition().then(position => {\n        this.getWeather(position.coords.latitude, position.coords.longitude);\n      }).catch(err => {\n        this.getWeather(28.67, 77.22);\n        alert(\"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\");\n      });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(() => this.getWeather(this.state.lat, this.state.lon), 600000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    if (this.state.temperatureC) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"city\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }, this.state.city), /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }\n      }, this.state.country)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ReactAnimatedWeather, {\n        icon: this.state.icon,\n        color: defaults.color,\n        size: defaults.size,\n        animate: defaults.animate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }\n      }, this.state.main)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"date-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dmy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        id: \"txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"current-time\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Clock, {\n        format: \"HH:mm:ss\",\n        interval: 1000,\n        ticking: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"current-date\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, dateBuilder(new Date()))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"temperature\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, this.state.temperatureC, \"\\xB0\", /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 45\n        }\n      }, \"C\"))))), /*#__PURE__*/React.createElement(Forcast, {\n        icon: this.state.icon,\n        weather: this.state.main,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: loader,\n        style: {\n          width: \"50%\",\n          WebkitUserDrag: \"none\"\n        },\n        alt: \"Loading...\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          fontSize: \"22px\",\n          fontWeight: \"600\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }\n      }, \"Detecting your location\"), /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: \"white\",\n          marginTop: \"10px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }, \"Your current location will be displayed on the App \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 64\n        }\n      }), \" & used for calculating Real time weather.\"));\n    }\n  }\n\n}\n\nexport default Weather;","map":{"version":3,"sources":["C:/project/PRODIGY_WD_05/src/currentLocation.js"],"names":["React","apiKeys","Clock","Forcast","loader","ReactAnimatedWeather","dateBuilder","d","months","days","day","getDay","date","getDate","month","getMonth","year","getFullYear","defaults","color","size","animate","Weather","Component","state","lat","undefined","lon","errorMessage","temperatureC","temperatureF","city","country","humidity","description","icon","sunrise","sunset","errorMsg","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","url","base","key","console","log","api_call","fetch","status","Error","data","json","current","weather","setState","timezone","Math","round","temp","main","error","message","componentDidMount","then","position","coords","latitude","longitude","catch","err","alert","timerID","setInterval","componentWillUnmount","clearInterval","render","Date","width","WebkitUserDrag","fontSize","fontWeight","marginTop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = (d) => {\n  let months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  let days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends React.Component {\n  state = {\n    lat: undefined,\n    lon: undefined,\n    errorMessage: undefined,\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    sunrise: undefined,\n    sunset: undefined,\n    errorMsg: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch((err) => {\n          this.getWeather(28.67, 77.22);\n          alert(\n            \"You have disabled location service. Allow 'This APP' to access your location. Your current location will be used for calculating Real time weather.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available\");\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  getWeather = async (lat, lon) => {\n    const url = `${apiKeys.base}onecall?lat=${lat}&lon=${lon}&exclude=minutely,hourly,alerts&units=metric&appid=${apiKeys.key}`;\n    console.log(`Fetching weather data from: ${url}`);\n\n    try {\n      const api_call = await fetch(url);\n      if (api_call.status === 401) {\n        throw new Error(\"Unauthorized: API key is invalid or expired.\");\n      }\n\n      const data = await api_call.json();\n      console.log(data); // Log data to check the response structure\n\n      if (data.current && data.current.weather && data.current.weather[0]) {\n        this.setState({\n          lat: lat,\n          lon: lon,\n          city: data.timezone,\n          temperatureC: Math.round(data.current.temp),\n          temperatureF: Math.round(data.current.temp * 1.8 + 32),\n          humidity: data.current.humidity,\n          main: data.current.weather[0].main,\n          country: \"\", // One Call API does not return country information\n        });\n\n        switch (this.state.main) {\n          case \"Haze\":\n            this.setState({ icon: \"CLEAR_DAY\" });\n            break;\n          case \"Clouds\":\n            this.setState({ icon: \"CLOUDY\" });\n            break;\n          case \"Rain\":\n            this.setState({ icon: \"RAIN\" });\n            break;\n          case \"Snow\":\n            this.setState({ icon: \"SNOW\" });\n            break;\n          case \"Dust\":\n            this.setState({ icon: \"WIND\" });\n            break;\n          case \"Drizzle\":\n            this.setState({ icon: \"SLEET\" });\n            break;\n          case \"Fog\":\n            this.setState({ icon: \"FOG\" });\n            break;\n          case \"Smoke\":\n            this.setState({ icon: \"FOG\" });\n            break;\n          case \"Tornado\":\n            this.setState({ icon: \"WIND\" });\n            break;\n          default:\n            this.setState({ icon: \"CLEAR_DAY\" });\n        }\n      } else {\n        this.setState({\n          errorMessage:\n            \"Unable to retrieve weather data. Please try again later.\",\n        });\n      }\n    } catch (error) {\n      this.setState({\n        errorMessage: `Error fetching weather data: ${error.message}. Please check your internet connection and try again.`,\n      });\n    }\n  };\n\n  render() {\n    if (this.state.temperatureC) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{this.state.city}</h2>\n              <h3>{this.state.country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              <ReactAnimatedWeather\n                icon={this.state.icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{this.state.main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div id=\"txt\"></div>\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {this.state.temperatureC}°<span>C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={this.state.icon} weather={this.state.main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img\n            src={loader}\n            style={{ width: \"50%\", WebkitUserDrag: \"none\" }}\n            alt=\"Loading...\"\n          />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed on the App <br /> & used for\n            calculating Real time weather.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n"]},"metadata":{},"sourceType":"module"}